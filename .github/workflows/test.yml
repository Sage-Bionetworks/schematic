# Built from:
# https://docs.github.com/en/actions/guides/building-and-testing-python
# https://github.com/Sage-Bionetworks/challengeutils/blob/master/.github/workflows/pythonapp.yml
# https://github.com/snok/install-poetry#workflows-and-tips

name: Test schematic

on:
  push:
    branches: ['main']
  pull_request: 
    branches: ['*']
  workflow_dispatch:  # Allow manually triggering the workflow
concurrency:
  # cancel the current running workflow from the same branch, PR when a new workflow is triggered 
  # when the trigger is not a PR but a push, it will use the commit sha to generate the concurrency group
  # {{ github.workflow }}: the workflow name is used to generate the concurrency group. This allows you to have more than one workflows
  # {{ github.ref_type }}: the type of Git ref object created in the repository. Can be either branch or tag 
  # {{ github.event.pull_request.number}}: get PR number 
  # {{ github.sha }}: full commit sha 
  # credit: https://github.com/Sage-Bionetworks-Workflows/sagetasks/blob/main/.github/workflows/ci.yml
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
jobs:
  test:

    runs-on: ubuntu-latest
    env:
      POETRY_VERSION:  1.2.0rc1
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:

      #----------------------------------------------
      #       check-out repo and set-up python     
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      #----------------------------------------------
      #          install & configure poetry         
      #----------------------------------------------
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org \
            | python3 - --version ${{ env.POETRY_VERSION }};
          poetry config virtualenvs.create true; 
          poetry config virtualenvs.in-project true; 

      #----------------------------------------------
      #       load cached venv if cache exists      
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist 
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        
      #----------------------------------------------
      #    install your root project, if required 
      #----------------------------------------------      
      - name: Install library
        run: poetry install --no-interaction
      
      #----------------------------------------------
      #             perform linting
      #----------------------------------------------    
      # Disabled until we agree to turn it on
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      #----------------------------------------------
      #             check formatting
      #----------------------------------------------
      # Disabled until we agree to turn it on
      # - name: Code formatting with black
      #   run: |
      #     # run black in check mode
      #     # if files are not formatted correctly, the build will not go through
      #     black . --check
      #----------------------------------------------
      #              run test suite   
      #----------------------------------------------
      - name: Run regular tests and rule combination tests
        env:
          SYNAPSE_ACCESS_TOKEN: ${{ secrets.SYNAPSE_ACCESS_TOKEN }}
        if: ${{ contains(github.event.head_commit.message, 'runcombos') }}
        run: >
          source .venv/bin/activate;
          pytest --cov-report=term --cov-report=html:htmlcov --cov=schematic/
          -m "not google_credentials_needed"
          
      - name: Run tests
        env:
          SYNAPSE_ACCESS_TOKEN: ${{ secrets.SYNAPSE_ACCESS_TOKEN }}          
        if: ${{ false == contains(github.event.head_commit.message, 'runcombos') }}
        run: >
          source .venv/bin/activate;
          pytest --cov-report=term --cov-report=html:htmlcov --cov=schematic/
          -m "not (google_credentials_needed or rule_combos)"
    
      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: htmlcov
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
